% Copyright 2022 Jeffrey Kegler
% This document is licensed under
% a Creative Commons Attribution-NoDerivs 3.0 United States License.
\documentclass[12pt]{amsart}
\usepackage{url}

\newsavebox{\myBox}
\newlength{\myHt}
\newlength{\myDp}
\newlength{\myWd}
\newcommand{\padBoxC}[3]{%
    \savebox{\myBox}{\ignorespaces#3}%
    \usebox{\myBox}%
    \myHt=\ht\myBox%
    \myDp=\dp\myBox%
    \vrule height\dimexpr\myHt+#1 depth\dimexpr\myDp+#2 width0pt%
}
\newcommand{\padBox}[2]{\padBoxC{#1}{#1}{#2}}

\newcommand{\cellboxrWidth}[1]{4.5in}
% non-optional-argument version of right-adjusted cellbox
\newcommand{\cellboxrB}[2]{%
    \parbox{#1}{\raggedright{\ignorespaces#2}}%
}
% Padded right-adjusted cellbox
\newcommand{\cellboxr}[2][\cellboxrWidth]{%
    \cellboxrB{#1}{%
        \padBoxC{4pt}{0pt}{\vphantom{(}}%
        {\ignorespaces#2}%
        \padBoxC{0pt}{4pt}{\vphantom{(}}%
    }%
}

\begin{document}

\date{\today}

\title{The Aycock-Horspool AHFA: some practical experience}

\author{Jeffrey Kegler}
\thanks{%
Copyright \copyright\ 2023 Jeffrey Kegler.  Version 1.
}
\thanks{%
This document is licensed under
a Creative Commons Attribution-NoDerivs 3.0 United States License.
}

\begin{abstract}
In the course of developing the Marpa parser,
we implemented the 
AHFA state-based parsing described in Aycock and Horspool's 2002 paper.
This allowed us to test its effectiveness in practice.
This paper reports our results.
\end{abstract}

\maketitle

\section{ The Aycock-Horspool finite automata. }

Most of the material in this document describes the behavior of
Marpa when it used the states of
the Aycock-Horspool finite automaton.
This material includes statistics, and some carefully worked
out math.
While not relevant to the current version of Marpa,
it may be useful for anyone else wanting to experiment with
the use of LR states in Earley items.

\section{ Statistics on AHFA states. }

\subsection{Confirmed states.}

We show the counts for the confirmed states for the Perl grammar
in Table \ref{tab:perl-confirmed}
on page \pageref{tab:perl-confirmed}.
They range in size from 1 to 20 items,
but the numbers are heavily skewed toward the low
end.
As can be seen, well over 90\% of the total confirmed states have
just one or two items.
The average size is 1.5235,
and the average of the $|size|^2$ is 3.9405.

\begin{table}[ht]
\caption{
  \label{tab:perl-confirmed}
  Confirmed AHFA states for a Perl grammar}
\vspace{1ex}
\begin{tabular}{|r|r|}
\hline
\multicolumn{1}{|c|}
  {\rule{0pt}{2.3ex}
   \rule{0pt}{-.5ex}
   Size}&
  \multicolumn{1}{|c|}{Percent}\\
& \multicolumn{1}{|c|}{of occurrences}\\
\hline
\rule{0pt}{2.5ex}
1&67.05\%\\
2&25.67\%\\
3&2.87\%\\
4&2.68\%\\
5&0.19\%\\
6&0.38\%\\
7&0.19\%\\
8&0.57\%\\
9&0.19\%\\
20&0.19\%\\
\hline
\end{tabular}
\end{table}

For HTML, I looked at a parser which generates grammars on
the fly, aggregating the states in all of them.
For the the HTML grammars I used, the totals are even more lopsided:
80.96\% of all confirmed states have only 1 item.
All the others (19.04\%) have 2 items.
The average size is 1.1904,
and the average of the $|size|^2$ is 1.5712.

Table \ref{tab:c-confirmed}
on page \pageref{tab:c-confirmed}.
shows the count of confirmed AHFA states, by state size,
for a compiler-quality C grammar,
the confirmed states range in size from 1 to 15 items but again,
the numbers are heavily skewed toward the low
end.  Here are the item counts that appear, with the percent of the total
confirmed AHFA states with that item count in parentheses.
in parentheses.
There were 970 confirmed C states.
The average size was 1.52.
The average of the size squared was 3.98.

\begin{table}[ht]
\caption{
  \label{tab:c-confirmed}
  Confirmed AHFA states for a C grammar}
\vspace{1ex}
\begin{tabular}{|r|r|}
\hline
\multicolumn{1}{|c|}
  {\rule{0pt}{2.3ex}
   \rule{0pt}{-.5ex}
   Size}&
  \multicolumn{1}{|c|}{Occurrences}\\
\hline
\rule{0pt}{2.5ex}
1&695\\
2&188\\
3&40\\
4&17\\
5&6\\
6&8\\
7&6\\
8&4\\
9&1\\
10&2\\
12&2\\
15&1\\
\hline
\end{tabular}
\end{table}

\subsection{Predicted states.}

The number of predicted states tends to be much more
evenly distributed.
It also tends to be much larger, and
the average for practical grammars may be $O(s)$,
where $s$ is the size of the grammar.
This is the same as the theoretical worst case.

Here are the number of items for predicted states for the Perl grammar.
Here in tabular form are the sizes most common sizes, in order of
decreasing frequency:
\par
\vskip\baselineskip
\vbox{\offinterlineskip
\halign{&#&
  \strut\quad\hfil#\quad\cr
&\omit&&\omit&\cr
&Size\hfil&&Frequency&\cr\
&\omit&&\omit&\cr
&2&&5&\cr
&3, 142&&4&\cr
&1, 4&&3&\cr
&6, 7, 143&&2&\cr
&\omit&&\omit&\cr}
}
\vskip\baselineskip
\par

In addition, the Perl grammar had exactly one predicted state of
the following sizes:
5,
64,
71,
77,
79,
81,
83,
85,
88,
90,
98,
100,
102,
104,
106,
108,
111,
116,
127,
129,
132,
135,
136,
137,
141,
144,
149,
151,
156,
157,
220,
224, and
225.

The number of predicted states in the Perl grammar was 58.
The average size was 83.59 AHFA items.
The average of the size squared was 11356.41.

And here is the same data for the collection of HTML grammars:
\par
\vskip\baselineskip
\vbox{\offinterlineskip
\halign{&#&
  \strut\quad\hfil#\quad\cr
&\omit&&\omit&\cr
&Size\hfil&&HTML predicted states&\cr\
&\omit&&\omit&\cr
&1&&95&\cr
&2&&95&\cr
&4&&95&\cr
&11&&181&\cr
&14&&181&\cr
&15&&294&\cr
&16&&112&\cr
&18&&349&\cr
&19&&120&\cr
&20&&190&\cr
&21&&63&\cr
&22&&22&\cr
&24&&8&\cr
&25&&16&\cr
&26&&16&\cr
&28&&2&\cr
&29&&16&\cr
&\omit&&\omit&\cr}
}
\vskip\baselineskip

The total number of predicted states in the HTML grammars was 1855.
Their average size was 14.60.
Their average size squared was 250.93.

The number of predicted states in the C grammar was 114.
The average size was 54.81.
The average size squared was 5361.28.
The sizes of the predicted states for the C grammar were spread from 1 
to 222.

\begin{itemize}
\item The most frequent sizes were 2 and 3, tied at
six states each.
\item There were five states of size 8.
\item There were four states in each of the sizes 4 and 90.
\item There were three states in each of the following sizes:
      6, 11, 31, and 47
\item There were two states in each of the following sizes:
           5, 14, 42, 64, 68, 78, 91, 95, and 98.
\item There was a single state of each of the following sizes:
     1, 7, 9, 12, 15, 17, 18, 19, 21, 22, 25, 28, 29, 33, 34, 36,
    37, 40, 43, 44, 45, 46, 52, 53, 54, 57, 58, 61, 65, 66, 69, 72,
    74, 76, 80, 81, 86, 87, 89, 94, 96, 97, 99, 102, 105, 108,
   115, 117, 119, 123, 125, 127, 144, 149, 150, 154, 181, 219,
   and 222.
\end{itemize}

\section{ Statistics on completed LHS symbols per AHFA state. }
An AHFA state may contain completions for more than one LHS,
but that is rare in practical use, and the number of completed
LHS symbols in the exceptions remains low.
The very complex Perl AHFA contains 271 states with completions.
Of these 268 have only one completed symbol.
The other three AHFA states complete only two different LHS symbols.
Two states have completions with both
a $term_hi$ and a ``indirob'' on the LHS.
One state has completions for both a
``sideff'' and an ``mexpr''.

My HTML test grammars make the
same point more strongly.
My HTML parser generates grammars on the fly.
These HTML grammars can differ from each other.
because Marpa takes the HTML input into account when
generating the grammar.
In my HTML test suite,
every single one
of the 14,782 AHFA states
has only one completed LHS symbol.

\bibliographystyle{plain}

\begin{thebibliography}{10}

\raggedright

\bibitem{AU1972}
Alfred H.~Aho and Jeffrey D.~Ullman.
\newblock The Theory of Parsing, Translation, and Computing
\newblock Prentice-Hall, Englewood Cliff, N.J., 1972.

\bibitem{AH2002}
John~Aycock and R.~Nigel~Horspool.
\newblock Practical Earley Parsing
\newblock {\em The Computer Journal},
    Vol. 45, No. 6, 2002, pp. 620-630.

\bibitem{Earley1970}
J.~Earley.
\newblock An efficient context-free parsing algorithm.
\newblock {\em Communications of the Association for Computing Machinery},
  13(2):94--102, 1970.

\bibitem{GJ2008}
Dirk~Grune and Ceriel~J.H Jacobs.
\newblock {\em Parsing Techniques: A Practical Guide}.
\newblock Springer, Amsterdam, 2008.

\bibitem{Marpa-HTML}
Jeffrey~Kegler, 2011: Marpa-HTML.
\newblock \url{http://search.cpan.org/dist/Marpa-HTML/}.

\bibitem{Marpa-R2}
Jeffrey~Kegler, 2013: Marpa-R2.
\newblock \url{http://search.cpan.org/dist/Marpa-R2/}.

\bibitem{Marpa-XS}
Jeffrey~Kegler, 2011: Marpa-XS-1.002000.
\newblock \url{http://search.cpan.org/dist/Marpa-XS/}.

\bibitem{Leo1991}
J.~M. I.~M. Leo.
\newblock A general context-free parsing algorithm running in linear time on
  every {LR($k$)} grammar without using lookahead.
\newblock {\em Theoretical Computer Science}, 82:165--176, 1991.

\end{thebibliography}

\clearpage
\tableofcontents

\end{document}
